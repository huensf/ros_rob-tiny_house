/* --------------------------------------------------------
 * This code was generated automatically by MBsysC modules.
 * MBsysC modules are distributed as part of the ROBOTRAN 
 * software. They provides functionalities for dealing with
 * symbolic equations generated by ROBOTRAN. 
 *
 * More info on www.robotran.be 
 *
 * Universite catholique de Louvain, Belgium 
 *
 * Last update : Tue May 18 15:39:38 2021
 * --------------------------------------------------------
 *
 */
#ifndef USERMODEL_h
#define USERMODEL_h


#include "thread_struct.h"

#include "mbs_user_interface.h"
// ============================================================ //


struct UserModel 
{
    struct FrontSuspension{
        double K;
        double D;
        double L0;
        double C_bar;
    } FrontSuspension;
 
    struct RearSuspension{
        double K;
        double D;
        double L0;
        double C_bar;
    } RearSuspension;
 
    struct FrontTire{
        double R;
        double K;
    } FrontTire;
 
    struct RearTire{
        double R;
        double K;
    } RearTire;
 
    struct EquilQuantities{
        double Qpropulsion;
        double Qrack;
    } EquilQuantities;
 
    struct SteeringAssembly{
        double delta_left;
        double delta_right;
    } SteeringAssembly;
 
    struct Rotations{
        double R11G;
        double R11D;
        double R12G;
        double R12D;
        double R11C;
        double R12C;
    } Rotations;
 
    struct Q_pi{
        double Q_pi;
    } Q_pi;
 
    struct Contrainte{
        double p0_low;
        double p0_high;
        double p1_lin;
        double p0_lin;
        double beta;
    } Contrainte;
 
    struct command_key{
        double torque;
    } command_key;
 
    struct thread{
        ThreadStruct* thread_struct;        // pointer must be initialized and freed by the user
    } thread;
 
    struct PID{
        double previous_error;
        double sum_error;
        double Kp;
        double Ki;
        double Kd;
        double velocity;
        double brake;
    } PID;
 
    struct expe{
        double t_rand;
    } expe;
 
    struct steerwheel{
        double D;
    } steerwheel;
 
    struct pedals{
        double ped1;
        double ped2;
        double mode;
    } pedals;
 
    struct Tire_rem{
        double R;
        double K;
    } Tire_rem;
 
};

// ============================================================ //
 
# endif
